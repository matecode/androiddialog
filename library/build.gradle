buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
        //check here which version is needed for gradle Version: https://github.com/dcendents/android-maven-gradle-plugin#note-on-releases
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven' // ADD THIS

group='com.gitlab.matecode'

android {
    compileSdkVersion rootProject.ext.compileSdkVer
    buildToolsVersion rootProject.ext.buildToolsVer

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVer
        targetSdkVersion rootProject.ext.targetSdkVer
        versionCode rootProject.ext.versionCodeInt
        versionName rootProject.ext.versionNamePrefix + versionCode
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile "com.android.support:appcompat-v7:$rootProject.ext.supportLibVer"
    compile "com.android.support:cardview-v7:$rootProject.ext.supportLibVer"
    compile "com.android.support:recyclerview-v7:$rootProject.ext.supportLibVer"
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'com.github.tony19:logback-android-core:1.1.1-6'
    compile('com.github.tony19:logback-android-classic:1.1.1-6') {
        exclude group: 'com.google.android', module: 'android'
    }
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-io:commons-io:2.5'
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
